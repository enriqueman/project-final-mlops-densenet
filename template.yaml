AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'DenseNet121 ONNX Inference API with FastAPI'

Conditions:
  IsProd: !Equals [!Ref Stage, 'prod']

Globals:
  Function:
    Timeout: 30
    MemorySize: 3008
    Environment:
      Variables:
        OMP_NUM_THREADS: 1
        ONNX_DISABLE_OPTIMIZATION: 0

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment stage

Resources:
  # ECR Repository para la aplicación Lambda
  DenseNetECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub 'densenet121-lambda-${Stage}'
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 5 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # Lambda Function con IMAGE
  DenseNetInferenceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'densenet121-inference-${Stage}'
      PackageType: Image
      ImageUri: !If 
        - IsProd
        - !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/aws-sam-cli-managed-prod-pipeline-resources-imagerepository-jxjisqblyq2w:latest'
        - !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/aws-sam-cli-managed-dev-pipeline-resources-imagerepository-kzgat478cs9h:latest'
      Architectures:
        - x86_64
      Timeout: 180
      Environment:
        Variables:
          APP_STAGE: !Ref Stage
          APP_LOG_LEVEL: INFO
          APP_REGION: !Ref 'AWS::Region'
          APP_ACCOUNT_ID: !Ref 'AWS::AccountId'
          MODEL_ECR_REPOSITORY: !Sub 'densenet121-model-${Stage}'
      Events:
        # API Gateway simplificado
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref DenseNetApi
            Path: /{proxy+}
            Method: ANY
        HttpApiRootEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref DenseNetApi
            Path: /
            Method: ANY
      # Políticas IAM
      Policies:
        - CloudWatchLogsFullAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            - Effect: Allow
              Action:
                - ecr:GetAuthorizationToken
                - ecr:BatchCheckLayerAvailability
                - ecr:GetDownloadUrlForLayer
                - ecr:BatchGetImage
                - ecr:DescribeRepositories
                - ecr:ListImages
              Resource: '*'
            - Effect: Allow
              Action:
                - sts:GetCallerIdentity
              Resource: '*'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListBucket
              Resource:
                - !Sub 'arn:aws:s3:::densenet-test-data-${Stage}'
                - !Sub 'arn:aws:s3:::densenet-test-data-${Stage}/*'

  # HTTP API Gateway (más simple que REST API)
  DenseNetApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref Stage
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"
        MaxAge: 600

  # CloudWatch Log Group
  DenseNetLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/densenet121-inference-${Stage}'
      RetentionInDays: 7

  # CloudWatch Alarms
  DenseNetErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'densenet121-errors-${Stage}'
      AlarmDescription: 'High error rate for DenseNet inference'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref DenseNetInferenceFunction

  DenseNetLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'densenet121-latency-${Stage}'
      AlarmDescription: 'High latency for DenseNet inference'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref DenseNetInferenceFunction

Outputs:
  DenseNetApiUrl:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${DenseNetApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  DenseNetFunctionName:
    Description: 'Lambda Function Name'
    Value: !Ref DenseNetInferenceFunction
    Export:
      Name: !Sub '${AWS::StackName}-FunctionName'

  ECRRepositoryUri:
    Description: 'ECR Repository URI for Lambda'
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DenseNetECRRepository}'
    Export:
      Name: !Sub '${AWS::StackName}-ECRUri'

  HealthCheckUrl:
    Description: 'Health check endpoint'
    Value: !Sub 'https://${DenseNetApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/health'

  SwaggerDocsUrl:
    Description: 'API Documentation (FastAPI Swagger)'
    Value: !Sub 'https://${DenseNetApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/docs'

  RedocDocsUrl:
    Description: 'API Documentation (ReDoc)'
    Value: !Sub 'https://${DenseNetApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/redoc'

  ModelECRRepositoryName:
    Description: 'Model ECR Repository Name (created manually)'
    Value: !Sub 'densenet121-model-${Stage}'
    Export:
      Name: !Sub '${AWS::StackName}-ModelECRRepoName'