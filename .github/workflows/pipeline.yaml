name: CdkPipeline

on:
  push:
    branches:
      - 'dev'
      - 'prod'

env:
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PIPELINE_EXECUTION_ROLE: arn:aws:iam::471112837636:role/cdk-pipeline-deployment-role
  TESTING_REGION: us-east-1
  PROD_REGION: us-east-1
  AWS_ACCOUNT_ID: 471112837636

jobs:
  # ========== DEV ENVIRONMENT ==========
  test-dev:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    env:
      STAGE: dev
      TEST_DATA_BUCKET: densenet-test-data-dev
      MODELS_BUCKET: densenet-models-dev
      AWS_REGION: us-east-1
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements-test.txt
          pip install boto3 requests Pillow numpy onnxruntime
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-session-dev
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Setup test data bucket
        run: |
          python -c "
          import boto3
          import time
          s3 = boto3.client('s3')
          bucket_name = '${{ env.TEST_DATA_BUCKET }}'
          
          try:
              s3.head_bucket(Bucket=bucket_name)
              print(f'Bucket {bucket_name} ya existe')
          except:
              if '${{ env.AWS_REGION }}' == 'us-east-1':
                  s3.create_bucket(Bucket=bucket_name)
              else:
                  s3.create_bucket(
                      Bucket=bucket_name,
                      CreateBucketConfiguration={'LocationConstraint': '${{ env.AWS_REGION }}'}
                  )
              print(f'Bucket {bucket_name} creado')
              time.sleep(5)
          "

      - name: Verify models bucket exists
        run: |
          echo "Verificando que el bucket de modelos existe..."
          aws s3 ls s3://${{ env.MODELS_BUCKET }}/models/ || {
            echo "‚ùå Error: El bucket de modelos ${{ env.MODELS_BUCKET }} no existe o est√° vac√≠o"
            echo "Por favor, ejecuta el script setup-models-bucket.sh primero:"
            echo "  ./setup-models-bucket.sh ${{ env.STAGE }} ${{ env.AWS_REGION }}"
            exit 1
          }
          echo "‚úÖ Bucket de modelos verificado"

      - name: Generate and upload test data
        run: |
          python scripts/generate_test_data.py

      - name: Download model from S3 for tests
        run: |
          echo "Descargando modelo desde S3 para tests..."
          python scripts/download_model_from_s3.py
          if [ ! -f "/tmp/densenet121_Opset17.onnx" ]; then
            echo "Error: El modelo no se descarg√≥ correctamente desde S3"
            exit 1
          fi
          echo "Modelo descargado exitosamente desde S3"
          ls -l /tmp/densenet121_Opset17.onnx

      - name: Run tests
        run: |
          if [ ! -f "/tmp/densenet121_Opset17.onnx" ]; then
            echo "Error: El modelo no existe en /tmp"
            ls -la /tmp
            exit 1
          fi
          pytest tests/test_model.py -v

  deploy-dev:
    needs: [test-dev]
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    env:
      STAGE: dev
      MODELS_BUCKET: densenet-models-dev
      STACK_NAME: densenet-fargate-dev
      AWS_REGION: us-east-1
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE }}
          role-session-name: deployment-session-dev
          role-duration-seconds: 3600
          role-skip-session-tagging: true
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install aws-cdk-lib constructs
          npm install -g aws-cdk
          
          # Instalar herramientas para testing del contenedor
          sudo apt-get update && sudo apt-get install -y jq curl
          
          # Instalar herramientas para testing del contenedor
          sudo apt-get update && sudo apt-get install -y jq curl

      - name: Verify models bucket for deployment
        run: |
          echo "Verificando bucket de modelos para deployment..."
          aws s3 ls s3://${{ env.MODELS_BUCKET }}/models/ || {
            echo "‚ùå Error: El bucket de modelos no existe para deployment"
            exit 1
          }
          echo "‚úÖ Bucket de modelos verificado para deployment"
          
      - name: Build and push Docker image
        run: |
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          
          # Create ECR repository if it doesn't exist
          aws ecr describe-repositories --repository-names app-${{ env.STAGE }} || \
          aws ecr create-repository --repository-name app-${{ env.STAGE }}
          
          # Build Docker image (modelo se descarga desde S3 en runtime)
          docker build -t app:latest \
            --build-arg AWS_REGION=${{ env.AWS_REGION }} \
            --build-arg STAGE=${{ env.STAGE }} \
            --build-arg AWS_ACCESS_KEY_ID=${{ env.PIPELINE_USER_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }} \
            --build-arg AWS_ACCOUNT_ID=${{ env.AWS_ACCOUNT_ID }} \
            .
          
          # Tag and push to ECR
          docker tag app:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/app-${{ env.STAGE }}:latest
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/app-${{ env.STAGE }}:latest

      - name: Test Docker container locally before deploy
        run: |
          echo "üß™ Probando contenedor Docker localmente..."
          
          # Ejecutar contenedor en background
          echo "üì¶ Iniciando contenedor..."
          docker run -d \
            --name test-container-${{ env.STAGE }} \
            -p 8080:80 \
            -e STAGE=${{ env.STAGE }} \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            -e AWS_ACCESS_KEY_ID=${{ env.PIPELINE_USER_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }} \
            -e AWS_ACCOUNT_ID=${{ env.AWS_ACCOUNT_ID }} \
            app:latest
          
          # Esperar a que el contenedor inicie
          echo "‚è≥ Esperando a que el contenedor inicie..."
          sleep 30
          
          # Verificar que el contenedor est√° corriendo
          echo "üîç Estado del contenedor:"
          docker ps -a --filter name=test-container-${{ env.STAGE }}
          
          # Obtener logs iniciales
          echo "üìÑ Logs del contenedor (primeros 50 l√≠neas):"
          docker logs test-container-${{ env.STAGE }} --tail 50 || echo "No se pudieron obtener logs"
          
          # Funci√≥n para probar endpoint
          test_endpoint() {
            local endpoint=$1
            local description=$2
            echo "üåê Probando $description ($endpoint)..."
            
            if curl -f -s -m 10 "http://localhost:8080$endpoint"; then
              echo "‚úÖ $description: OK"
              echo "üìä Response body:"
              curl -s -m 10 "http://localhost:8080$endpoint" | jq '.' || curl -s -m 10 "http://localhost:8080$endpoint"
              echo ""
            else
              echo "‚ùå $description: FAILED"
              echo "üìä Attempting raw response:"
              curl -v -m 10 "http://localhost:8080$endpoint" || echo "Curl failed completely"
              echo ""
            fi
          }
          
          # Esperar un poco m√°s para que la app est√© completamente lista
          echo "‚è≥ Esperando a que FastAPI est√© listo..."
          sleep 45
          
          # Probar diferentes endpoints
          test_endpoint "/" "Endpoint ra√≠z (health check del ALB)"
          test_endpoint "/health" "Endpoint de health check"
          test_endpoint "/health/basic" "Endpoint de health check b√°sico"
          test_endpoint "/debug" "Endpoint de debug"
          
          # Verificar si el proceso est√° corriendo dentro del contenedor
          echo "üîç Procesos corriendo en el contenedor:"
          docker exec test-container-${{ env.STAGE }} ps aux || echo "No se pudieron obtener procesos"
          
          # Verificar puertos
          echo "üîç Puertos del contenedor:"
          docker port test-container-${{ env.STAGE }} || echo "No se pudieron obtener puertos"
          
          # Logs finales m√°s detallados
          echo "üìÑ Logs completos del contenedor:"
          docker logs test-container-${{ env.STAGE }} || echo "No se pudieron obtener logs completos"
          
          # Cleanup
          echo "üßπ Limpiando contenedor de prueba..."
          docker stop test-container-${{ env.STAGE }} || echo "Container ya parado"
          docker rm test-container-${{ env.STAGE }} || echo "Container ya eliminado"
          
          echo "‚úÖ Test de contenedor completado"

      - name: Test Docker container locally before deploy
        run: |
          echo "üß™ Probando contenedor Docker localmente..."
          
          # Ejecutar contenedor en background
          echo "üì¶ Iniciando contenedor..."
          docker run -d \
            --name test-container-${{ env.STAGE }} \
            -p 8080:80 \
            -e STAGE=${{ env.STAGE }} \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            -e AWS_ACCESS_KEY_ID=${{ env.PIPELINE_USER_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }} \
            -e AWS_ACCOUNT_ID=${{ env.AWS_ACCOUNT_ID }} \
            app:latest
          
          # Esperar a que el contenedor inicie
          echo "‚è≥ Esperando a que el contenedor inicie..."
          sleep 30
          
          # Verificar que el contenedor est√° corriendo
          echo "üîç Estado del contenedor:"
          docker ps -a --filter name=test-container-${{ env.STAGE }}
          
          # Obtener logs iniciales
          echo "üìÑ Logs del contenedor (primeros 50 l√≠neas):"
          docker logs test-container-${{ env.STAGE }} --tail 50 || echo "No se pudieron obtener logs"
          
          # Funci√≥n para probar endpoint
          test_endpoint() {
            local endpoint=$1
            local description=$2
            echo "üåê Probando $description ($endpoint)..."
            
            if curl -f -s -m 10 "http://localhost:8080$endpoint"; then
              echo "‚úÖ $description: OK"
              echo "üìä Response body:"
              curl -s -m 10 "http://localhost:8080$endpoint" | jq '.' || curl -s -m 10 "http://localhost:8080$endpoint"
              echo ""
            else
              echo "‚ùå $description: FAILED"
              echo "üìä Attempting raw response:"
              curl -v -m 10 "http://localhost:8080$endpoint" || echo "Curl failed completely"
              echo ""
            fi
          }
          
          # Esperar un poco m√°s para que la app est√© completamente lista
          echo "‚è≥ Esperando a que FastAPI est√© listo..."
          sleep 45
          
          # Probar diferentes endpoints
          test_endpoint "/" "Endpoint ra√≠z (health check del ALB)"
          test_endpoint "/health" "Endpoint de health check"
          test_endpoint "/health/basic" "Endpoint de health check b√°sico"
          test_endpoint "/debug" "Endpoint de debug"
          
          # Verificar si el proceso est√° corriendo dentro del contenedor
          echo "üîç Procesos corriendo en el contenedor:"
          docker exec test-container-${{ env.STAGE }} ps aux || echo "No se pudieron obtener procesos"
          
          # Verificar puertos
          echo "üîç Puertos del contenedor:"
          docker port test-container-${{ env.STAGE }} || echo "No se pudieron obtener puertos"
          
          # Logs finales m√°s detallados
          echo "üìÑ Logs completos del contenedor:"
          docker logs test-container-${{ env.STAGE }} || echo "No se pudieron obtener logs completos"
          
          # Cleanup
          echo "üßπ Limpiando contenedor de prueba..."
          docker stop test-container-${{ env.STAGE }} || echo "Container ya parado"
          docker rm test-container-${{ env.STAGE }} || echo "Container ya eliminado"
          
          echo "‚úÖ Test de contenedor completado"
          
      - name: Deploy with CDK
        run: |
          cdk deploy --app="python3 ${PWD}/app.py" \
            --require-approval=never \
            -c stage=${{ env.STAGE }} \
            -c region=${{ env.AWS_REGION }} \
            ${{ env.STACK_NAME }}

  # ========== PROD ENVIRONMENT ==========
  test-prod:
    if: github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    env:
      STAGE: prod
      TEST_DATA_BUCKET: densenet-test-data-prod
      MODELS_BUCKET: densenet-models-prod
      AWS_REGION: us-east-1
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements-test.txt
          pip install boto3 requests Pillow numpy onnxruntime
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-session-prod
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Setup test data bucket
        run: |
          python -c "
          import boto3
          import time
          s3 = boto3.client('s3')
          bucket_name = '${{ env.TEST_DATA_BUCKET }}'
          
          try:
              s3.head_bucket(Bucket=bucket_name)
              print(f'Bucket {bucket_name} ya existe')
          except:
              if '${{ env.AWS_REGION }}' == 'us-east-1':
                  s3.create_bucket(Bucket=bucket_name)
              else:
                  s3.create_bucket(
                      Bucket=bucket_name,
                      CreateBucketConfiguration={'LocationConstraint': '${{ env.AWS_REGION }}'}
                  )
              print(f'Bucket {bucket_name} creado')
              time.sleep(5)
          "

      - name: Verify models bucket exists
        run: |
          echo "Verificando que el bucket de modelos existe..."
          aws s3 ls s3://${{ env.MODELS_BUCKET }}/models/ || {
            echo "‚ùå Error: El bucket de modelos ${{ env.MODELS_BUCKET }} no existe o est√° vac√≠o"
            echo "Por favor, ejecuta el script setup-models-bucket.sh primero:"
            echo "  ./setup-models-bucket.sh ${{ env.STAGE }} ${{ env.AWS_REGION }}"
            exit 1
          }
          echo "‚úÖ Bucket de modelos verificado"

      - name: Generate and upload test data
        run: |
          python scripts/generate_test_data.py

      - name: Download model from S3 for tests
        run: |
          echo "Descargando modelo desde S3 para tests..."
          python scripts/download_model_from_s3.py
          if [ ! -f "/tmp/densenet121_Opset17.onnx" ]; then
            echo "Error: El modelo no se descarg√≥ correctamente desde S3"
            exit 1
          fi
          echo "Modelo descargado exitosamente desde S3"
          ls -l /tmp/densenet121_Opset17.onnx

      - name: Run tests
        run: |
          if [ ! -f "/tmp/densenet121_Opset17.onnx" ]; then
            echo "Error: El modelo no existe en /tmp"
            ls -la /tmp
            exit 1
          fi
          pytest tests/test_model.py -v

  deploy-prod:
    needs: [test-prod]
    if: github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    env:
      STAGE: prod
      MODELS_BUCKET: densenet-models-prod
      STACK_NAME: densenet-fargate-prod
      AWS_REGION: us-east-1
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.PIPELINE_EXECUTION_ROLE }}
          role-session-name: deployment-session-prod
          role-duration-seconds: 3600
          role-skip-session-tagging: true
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install aws-cdk-lib constructs
          npm install -g aws-cdk
          
          # Instalar herramientas para testing del contenedor
          sudo apt-get update && sudo apt-get install -y jq curl

      - name: Verify models bucket for deployment
        run: |
          echo "Verificando bucket de modelos para deployment..."
          aws s3 ls s3://${{ env.MODELS_BUCKET }}/models/ || {
            echo "‚ùå Error: El bucket de modelos no existe para deployment"
            exit 1
          }
          echo "‚úÖ Bucket de modelos verificado para deployment"
          
      - name: Build and push Docker image
        run: |
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          
          # Create ECR repository if it doesn't exist
          aws ecr describe-repositories --repository-names app-${{ env.STAGE }} || \
          aws ecr create-repository --repository-name app-${{ env.STAGE }}
          
          # Build Docker image (modelo se descarga desde S3 en runtime)
          docker build -t app:latest \
            --build-arg AWS_REGION=${{ env.AWS_REGION }} \
            --build-arg STAGE=${{ env.STAGE }} \
            --build-arg AWS_ACCESS_KEY_ID=${{ env.PIPELINE_USER_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }} \
            --build-arg AWS_ACCOUNT_ID=${{ env.AWS_ACCOUNT_ID }} \
            .
          
          # Tag and push to ECR
          docker tag app:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/app-${{ env.STAGE }}:latest
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/app-${{ env.STAGE }}:latest

      - name: Test Docker container locally before deploy
        run: |
          echo "üß™ Probando contenedor Docker localmente..."
          
          # Ejecutar contenedor en background
          echo "üì¶ Iniciando contenedor..."
          docker run -d \
            --name test-container-${{ env.STAGE }} \
            -p 8080:80 \
            -e STAGE=${{ env.STAGE }} \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            -e AWS_ACCESS_KEY_ID=${{ env.PIPELINE_USER_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }} \
            -e AWS_ACCOUNT_ID=${{ env.AWS_ACCOUNT_ID }} \
            app:latest
          
          # Esperar a que el contenedor inicie
          echo "‚è≥ Esperando a que el contenedor inicie..."
          sleep 30
          
          # Verificar que el contenedor est√° corriendo
          echo "üîç Estado del contenedor:"
          docker ps -a --filter name=test-container-${{ env.STAGE }}
          
          # Obtener logs iniciales
          echo "üìÑ Logs del contenedor (primeros 50 l√≠neas):"
          docker logs test-container-${{ env.STAGE }} --tail 50 || echo "No se pudieron obtener logs"
          
          # Funci√≥n para probar endpoint
          test_endpoint() {
            local endpoint=$1
            local description=$2
            echo "üåê Probando $description ($endpoint)..."
            
            if curl -f -s -m 10 "http://localhost:8080$endpoint"; then
              echo "‚úÖ $description: OK"
              echo "üìä Response body:"
              curl -s -m 10 "http://localhost:8080$endpoint" | jq '.' || curl -s -m 10 "http://localhost:8080$endpoint"
              echo ""
            else
              echo "‚ùå $description: FAILED"
              echo "üìä Attempting raw response:"
              curl -v -m 10 "http://localhost:8080$endpoint" || echo "Curl failed completely"
              echo ""
            fi
          }
          
          # Esperar un poco m√°s para que la app est√© completamente lista
          echo "‚è≥ Esperando a que FastAPI est√© listo..."
          sleep 45
          
          # Probar diferentes endpoints
          test_endpoint "/" "Endpoint ra√≠z (health check del ALB)"
          test_endpoint "/health" "Endpoint de health check"
          test_endpoint "/health/basic" "Endpoint de health check b√°sico"
          test_endpoint "/debug" "Endpoint de debug"
          
          # Verificar si el proceso est√° corriendo dentro del contenedor
          echo "üîç Procesos corriendo en el contenedor:"
          docker exec test-container-${{ env.STAGE }} ps aux || echo "No se pudieron obtener procesos"
          
          # Verificar puertos
          echo "üîç Puertos del contenedor:"
          docker port test-container-${{ env.STAGE }} || echo "No se pudieron obtener puertos"
          
          # Logs finales m√°s detallados
          echo "üìÑ Logs completos del contenedor:"
          docker logs test-container-${{ env.STAGE }} || echo "No se pudieron obtener logs completos"
          
          # Cleanup
          echo "üßπ Limpiando contenedor de prueba..."
          docker stop test-container-${{ env.STAGE }} || echo "Container ya parado"
          docker rm test-container-${{ env.STAGE }} || echo "Container ya eliminado"
          
          echo "‚úÖ Test de contenedor completado"
          
      - name: Deploy with CDK
        run: |
          cdk deploy --app="python3 ${PWD}/app.py" \
            --require-approval=never \
            -c stage=${{ env.STAGE }} \
            -c region=${{ env.AWS_REGION }} \
            ${{ env.STACK_NAME }}