name: Pipeline

on:
  push:
    branches:
      - 'prod'
      - 'dev'
  delete:
    branches:
      - 'feature**'

env:
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SAM_TEMPLATE: template.yaml
  TESTING_STACK_NAME: densenet-lambda-dev
  TESTING_PIPELINE_EXECUTION_ROLE: arn:aws:iam::471112837636:role/aws-sam-cli-managed-personal--PipelineExecutionRole-w1ceHg3Srqie
  TESTING_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::471112837636:role/aws-sam-cli-managed-perso-CloudFormationExecutionRo-LVTGVTJzrPve
  TESTING_ARTIFACTS_BUCKET: 
  TESTING_IMAGE_REPOSITORY: 471112837636.dkr.ecr.us-east-1.amazonaws.com/aws-sam-cli-managed-dev-pipeline-resources-imagerepository-kzgat478cs9h
  TESTING_REGION: us-east-1
  PROD_STACK_NAME: densenet-lambda-prod
  PROD_PIPELINE_EXECUTION_ROLE: arn:aws:iam::471112837636:user/aws-sam-cli-managed-personal-account-d-PipelineUser-0c4EBLF4Lx9H
  PROD_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::471112837636:role/aws-sam-cli-managed-personal--PipelineExecutionRole-w1ceHg3Srqie
  PROD_ARTIFACTS_BUCKET: aws-sam-cli-managed-perso-CloudFormationExecutionRo-LVTGVTJzrPve
  PROD_IMAGE_REPOSITORY: 471112837636.dkr.ecr.us-east-1.amazonaws.com/aws-sam-cli-managed-prod-pipeline-resources-imagerepository-jxjisqblyq2w
  PROD_REGION: us-east-1
  TEST_DATA_BUCKET: densenet-test-data-${{ github.ref == 'refs/heads/prod' && 'prod' || 'dev' }}
  STAGE: ${{ github.ref == 'refs/heads/prod' && 'prod' || 'dev' }}

jobs:
  test:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements-test.txt
          pip install docker boto3 requests Pillow numpy onnxruntime
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-session
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Setup test data bucket
        run: |
          # Ejecutar script de configuración del bucket
          python -c "
          import boto3
          import time
          s3 = boto3.client('s3')
          bucket_name = '${{ env.TEST_DATA_BUCKET }}'
          
          # Verificar si el bucket existe
          try:
              s3.head_bucket(Bucket=bucket_name)
              print(f'Bucket {bucket_name} ya existe')
          except:
              if '${{ env.TESTING_REGION }}' == 'us-east-1':
                  s3.create_bucket(Bucket=bucket_name)
              else:
                  s3.create_bucket(
                      Bucket=bucket_name,
                      CreateBucketConfiguration={'LocationConstraint': '${{ env.TESTING_REGION }}'}
                  )
              print(f'Bucket {bucket_name} creado')
              # Esperar a que el bucket esté disponible
              time.sleep(5)
          "

      - name: Generate and upload test data
        env:
          AWS_REGION: ${{ env.TESTING_REGION }}
          STAGE: ${{ env.STAGE }}
          TEST_DATA_BUCKET: ${{ env.TEST_DATA_BUCKET }}
        run: |
          python scripts/generate_test_data.py
          
      - name: Install Docker
        run: |
          # Add Docker's official GPG key:
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg

          # Add the repository to Apt sources:
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update

          # Install Docker packages
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

          # Start Docker service
          sudo systemctl start docker || true
          sudo systemctl status docker

          # Add user to docker group
          sudo usermod -aG docker $USER
          
          # Verify Docker installation
          docker --version

      - name: Inspect model image
        env:
          AWS_REGION: ${{ env.TESTING_REGION }}
          STAGE: ${{ env.STAGE }}
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
        run: |
          echo "Inspeccionando imagen del modelo..."
          python scripts/inspect_model_image.py
          
      - name: Download model from ECR
        env:
          AWS_REGION: ${{ env.TESTING_REGION }}
          STAGE: ${{ env.STAGE }}
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
        run: |
          # Asegurarse que el directorio /tmp existe y tenemos permisos
          sudo mkdir -p /tmp
          sudo chmod 777 /tmp
          
          # Ejecutar script de descarga del modelo
          echo "Descargando modelo desde ECR..."
          python scripts/download_model.py
          
          # Verificar que el modelo se descargó correctamente
          if [ ! -f "/tmp/densenet121_Opset17.onnx" ]; then
            echo "Error: El modelo no se descargó correctamente"
            exit 1
          fi
          
          echo "Modelo descargado exitosamente"
          ls -l /tmp/densenet121_Opset17.onnx
          
      - name: Run tests
        env:
          AWS_REGION: ${{ env.TESTING_REGION }}
          STAGE: ${{ env.STAGE }}
          TEST_DATA_BUCKET: ${{ env.TEST_DATA_BUCKET }}
        run: |
          # Verificar que el modelo existe antes de las pruebas
          if [ ! -f "/tmp/densenet121_Opset17.onnx" ]; then
            echo "Error: El modelo no existe en /tmp"
            ls -la /tmp
            exit 1
          fi
          
          pytest tests/test_model.py -v

  build-and-deploy-dev:
    if: github.ref == 'refs/heads/dev'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: dev-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Download model from bucket
        run: |
          aws s3 cp s3://${TEST_DATA_BUCKET}/models/densenet121_Opset17.onnx densenet_function/

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Lambda image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.TESTING_IMAGE_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          cd densenet_function
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG

      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Deploy to dev
        run: |
          sam deploy \
            --stack-name ${TESTING_STACK_NAME} \
            --template-file ${SAM_TEMPLATE} \
            --capabilities CAPABILITY_IAM \
            --region ${TESTING_REGION} \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --image-repository ${TESTING_IMAGE_REPOSITORY} \
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE} \
            --parameter-overrides Stage=dev

  build-and-deploy-prod:
    if: github.ref == 'refs/heads/prod'
    needs: [test]
    runs-on: ubuntu-latest
    environment: production  # Requiere aprobación manual
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Download model from bucket
        run: |
          aws s3 cp s3://${TEST_DATA_BUCKET}/models/densenet121_Opset17.onnx densenet_function/

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Lambda image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.PROD_IMAGE_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          cd densenet_function
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG

      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Deploy to production
        run: |
          sam deploy \
            --stack-name ${PROD_STACK_NAME} \
            --template-file ${SAM_TEMPLATE} \
            --capabilities CAPABILITY_IAM \
            --region ${PROD_REGION} \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --image-repository ${PROD_IMAGE_REPOSITORY} \
            --no-fail-on-empty-changeset \
            --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE} \
            --parameter-overrides Stage=prod
